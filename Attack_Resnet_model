{"cells":[{"cell_type":"markdown","source":["## Import libraries"],"metadata":{"id":"yuwyWmQd37Ef"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"7iGmOeNAEKR1"},"outputs":[],"source":["%matplotlib inline\n","from copy import deepcopy\n","from collections import OrderedDict\n","import gc\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm_notebook\n","import numpy as np\n","import pandas as pd\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.optim import SGD,Adam,lr_scheduler\n","from torch.utils.data import random_split\n","import torchvision\n","from torchvision import transforms,models"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I_qGeyNqr4W4","executionInfo":{"status":"ok","timestamp":1668525360923,"user_tz":-330,"elapsed":3890,"user":{"displayName":"Study Material","userId":"04503814293963147876"}},"outputId":"be15c42f-5f90-455d-f518-b00b97af6b26"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SsM95ttu8RzT","outputId":"da0b493a-a074-4a45-9dba-457ebdf73d18","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668525365817,"user_tz":-330,"elapsed":447,"user":{"displayName":"Study Material","userId":"04503814293963147876"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f42fe1a2670>"]},"metadata":{},"execution_count":4}],"source":["torch.manual_seed(0)"]},{"cell_type":"markdown","source":["## Import private training dataset CIFAR10"],"metadata":{"id":"HBIMvU4g3_z1"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2127,"status":"ok","timestamp":1668525369107,"user":{"displayName":"Study Material","userId":"04503814293963147876"},"user_tz":-330},"id":"A2VA7BUVETc9","outputId":"f25ff32d-b725-44b8-f458-aedcdbba95e2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Files already downloaded and verified\n","Files already downloaded and verified\n"]}],"source":["train_transform = transforms.Compose([\n","    transforms.Resize(224),\n","#     transforms.RandomHorizontalFlip(p=.40),\n","#     transforms.RandomRotation(30),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","])\n","\n","test_transform = transforms.Compose([\n","    transforms.Resize(224),\n","    transforms.ToTensor(),\n","    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])\n","\n","traindata = torchvision.datasets.CIFAR10(root='.', train=True,download=True, transform=train_transform)\n","trainset,valset = random_split(traindata,[42000,8000])\n","trainset, attack = random_split(trainset,[35000,7000])\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=64,shuffle=True)\n","valloader = torch.utils.data.DataLoader(valset, batch_size=64,shuffle=False)\n","\n","testset = torchvision.datasets.CIFAR10(root='.', train=False,download=True, transform=test_transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=64,shuffle=False)\n","\n","classes = ('plane', 'car', 'bird', 'cat','deer', 'dog', 'frog', 'horse', 'ship', 'truck')"]},{"cell_type":"markdown","source":["## Defining and training the target ResNet18 model"],"metadata":{"id":"Mg1ekUet4DWZ"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4899,"status":"ok","timestamp":1668525375345,"user":{"displayName":"Study Material","userId":"04503814293963147876"},"user_tz":-330},"id":"fiVYqrW8EZs-","outputId":"f93a87da-5043-41a4-bc38-673f8c571b49"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n","  f\"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, \"\n","/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"output_type":"execute_result","data":{"text/plain":["['base', 'drop', 'final']"]},"metadata":{},"execution_count":6}],"source":["class Model(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","        base = models.resnet18(pretrained=True)\n","        self.base = nn.Sequential(*list(base.children())[:-1])\n","        in_features = base.fc.in_features\n","        self.drop = nn.Dropout()\n","        self.final = nn.Linear(in_features,10)\n","    \n","    def forward(self,x):\n","        x = self.base(x)\n","        x = self.drop(x.view(-1,self.final.in_features))\n","        return self.final(x)\n","    \n","model = Model().cuda()\n","[x for x,y in model.named_children()]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a-SvcMT8Er1f"},"outputs":[],"source":["criterion = nn.CrossEntropyLoss()\n","param_groups = [\n","    {'params':model.base.parameters(),'lr':.0001},\n","    {'params':model.final.parameters(),'lr':.001}\n","]\n","optimizer = Adam(param_groups)\n","lr_scheduler = lr_scheduler.StepLR(optimizer, step_size=1, gamma=0.1)\n","states = {}"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2193430,"status":"ok","timestamp":1663498016282,"user":{"displayName":"Amazon ML","userId":"04183434057620849139"},"user_tz":-330},"id":"KHades-IEwq-","outputId":"62e8d743-93ab-4474-f65d-ab384d26f481"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train loss 1: 0.4232543195928846,Train Acc:85.56285714285714%\n","Val accuracy:92.5875%\n","Train loss 2: 0.14323586622987475,Train Acc:95.14857142857143%\n","Val accuracy:92.925%\n","Train loss 3: 0.0702935282434736,Train Acc:97.64%\n","Val accuracy:93.3375%\n","Train loss 4: 0.05799563212990761,Train Acc:98.01142857142857%\n","Val accuracy:92.85%\n","Train loss 5: 0.04131636088192463,Train Acc:98.59142857142857%\n","Val accuracy:92.4375%\n","Train loss 6: 0.042838873479089566,Train Acc:98.54285714285714%\n","Val accuracy:93.3%\n","Train loss 7: 0.03337816809985254,Train Acc:98.84571428571428%\n","Val accuracy:93.2875%\n","Train loss 8: 0.03328152528197638,Train Acc:98.84285714285714%\n","Val accuracy:93.25%\n","Train loss 9: 0.03146337359095258,Train Acc:98.94%\n","Val accuracy:93.475%\n","Train loss 10: 0.030037900362829013,Train Acc:99.01142857142857%\n","Val accuracy:93.275%\n","Finished Training\n","CPU times: user 1h 43min 28s, sys: 1min 20s, total: 1h 44min 49s\n","Wall time: 15min 4s\n"]}],"source":["%%time\n","best_val_acc = -1000\n","best_val_model = None\n","for epoch in range(10):  \n","    model.train(True)\n","    running_loss = 0.0\n","    running_acc = 0\n","    for i, data in enumerate(trainloader, 0):\n","        inputs, labels = data\n","        inputs, labels = inputs.cuda(),labels.cuda()\n","\n","        optimizer.zero_grad()\n","        outputs = model(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        # print statistics\n","        running_loss += loss.item() * inputs.size(0)\n","        out = torch.argmax(outputs.detach(),dim=1)\n","        assert out.shape==labels.shape\n","        running_acc += (labels==out).sum().item()\n","    print(f\"Train loss {epoch+1}: {running_loss/len(trainset)},Train Acc:{running_acc*100/len(trainset)}%\")\n","    \n","    correct = 0\n","    model.train(False)\n","    with torch.no_grad():\n","        for inputs,labels in valloader:\n","            out = model(inputs.cuda()).cpu()\n","            out = torch.argmax(out,dim=1)\n","            acc = (out==labels).sum().item()\n","            correct += acc\n","    print(f\"Val accuracy:{correct*100/len(valset)}%\")\n","    if correct>best_val_acc:\n","        best_val_acc = correct\n","        best_val_model = deepcopy(model.state_dict())\n","    lr_scheduler.step()\n","    \n","print('Finished Training')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22952,"status":"ok","timestamp":1663498136807,"user":{"displayName":"Amazon ML","userId":"04183434057620849139"},"user_tz":-330},"id":"H67iOnLnE9Pw","outputId":"98d36124-dc6b-4284-ec4a-21d7b1e35cd8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Test accuracy: 93.58%\n","CPU times: user 2min 17s, sys: 1.56 s, total: 2min 19s\n","Wall time: 15.1 s\n"]}],"source":["%%time\n","correct = 0\n","model.load_state_dict(best_val_model)\n","model.train(False)\n","with torch.no_grad():\n","    for inputs,labels in testloader:\n","        out = model(inputs.cuda()).cpu()\n","        out = torch.argmax(out,dim=1)\n","        acc = (out==labels).sum().item()\n","        \n","        correct += acc\n","print(f\"Test accuracy: {correct*100/len(testset)}%\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aI6_ASj9Nsqi"},"outputs":[],"source":["torch.save(model.state_dict(), \"/content/drive/MyDrive/cifar10/resnet18_cifar.pt\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4040,"status":"ok","timestamp":1663500832414,"user":{"displayName":"Amazon ML","userId":"04183434057620849139"},"user_tz":-330},"id":"M6JNzct2Pvzp","outputId":"78dbd816-2cd0-474a-bbd0-bc380e5fe6fc"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: kmeans-pytorch in /usr/local/lib/python3.7/dist-packages (0.3)\n"]}],"source":["# !pip install kmeans-pytorch"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":704,"status":"ok","timestamp":1668525383090,"user":{"displayName":"Study Material","userId":"04503814293963147876"},"user_tz":-330},"id":"g_hquofHYEX-","outputId":"ab08cb51-345b-43ab-a85e-6f83851ed856"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":8}],"source":["model.load_state_dict(torch.load(\"/content/drive/MyDrive/Marich/RESNET/resnet18_cifar.pt\"))"]},{"cell_type":"markdown","source":["## Importing libraries for the extraction methods"],"metadata":{"id":"SBCSjSFD4mAI"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"n4g-l26lPS4r","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668525393129,"user_tz":-330,"elapsed":4725,"user":{"displayName":"Study Material","userId":"04503814293963147876"}},"outputId":"7032e17e-79bb-47db-fa9b-45e0185ce968"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: kmeans-pytorch in /usr/local/lib/python3.7/dist-packages (0.3)\n"]}],"source":["!pip install kmeans-pytorch\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import sys\n","import torch\n","import torch.optim as optim\n","import torch.nn.functional as F\n","import torchvision\n","\n","from torch import nn\n","from torch.autograd import Variable\n","from torch.utils.data import Dataset, Subset, ConcatDataset, DataLoader,random_split,TensorDataset, ChainDataset\n","from torchvision import transforms\n","from torchvision.datasets import cifar\n","import random\n","\n","from kmeans_pytorch import kmeans, kmeans_predict\n","import time\n","from torch.special import entr\n","from scipy.stats import entropy\n","import pandas as pd"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1mTyv6OyfEua"},"outputs":[],"source":["def conv_dataset(data):\n","  datas = []\n","  labels = []\n","  for d, l in data:\n","    datas.append(d)\n","    labels.append(torch.tensor(l))\n","  mydata = dataset(datas,labels)\n","  return mydata"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JPFxwhy_fEua"},"outputs":[],"source":["class dataset(Dataset):\n","    def __init__(self, X, Y, transform = None):\n","        self.X = X\n","        self.Y = Y\n","        self.transform = transform\n","\n","    def __len__(self):\n","        return len(self.Y)\n","\n","    def __getitem__(self, idx):\n","        if self.transform:\n","            x = self.transform(self.X[idx])\n","        else:\n","            x = self.X[idx]\n","        y = self.Y[idx]\n","        return x, y"]},{"cell_type":"code","source":["from sklearn.cluster import KMeans"],"metadata":{"id":"ESelqSllzZ7v"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Defining sampling techniques"],"metadata":{"id":"9Hot4HfC4q1f"}},{"cell_type":"markdown","source":["### KMeans sampling"],"metadata":{"id":"Sgl3L_NQ4vE0"}},{"cell_type":"code","source":["def kmeans_sampling(dataset, unlab_idx, budget, device = None):\n","    if device == None:\n","        print(\"Using CPU\")\n","        device = torch.device(\"cpu\")\n","    elif device == \"cuda\":\n","        if torch.cuda.is_available():\n","            print(\"Using CUDA\")\n","            device = torch.device(\"cuda\")\n","        else:\n","            print(\"Cuda not found. Using CPU.\")\n","            device =torch.device(\"cpu\")\n","    elif device == \"mps\":\n","        if torch.has_mps:\n","            print(\"Using MPS\")\n","            device = torch.device(\"mps\")\n","        else:\n","            print(\"MPS not found. Using CPU\")\n","            device = torch.device(\"cpu\")\n","    X = []\n","    for i in unlab_idx:\n","        inputs, labels = dataset[i]\n","        X.append(inputs.view(-1).cpu().numpy())\n","    X = torch.tensor(np.array(X)).to(device)\n","    # kmeans = KMeans(n_clusters=10, random_state=0).fit(X)\n","    # clusters = kmeans.cluster_centers_\n","    cluster_ids_x, clusters = kmeans(X=X, num_clusters=10, distance='euclidean', device=device)\n","    dist = {i:[] for i in range(10)}\n","    for z in range(10):\n","        d = [[torch.linalg.norm(dataset[j][0].view(-1).to(device)-torch.tensor(clusters[z]).to(device)).item(),j] for j in unlab_idx]\n","        dist[z].extend(d)\n","        dist[z].sort()\n","        \n","    index = []\n","    for p in range(10):\n","        t = 0\n","        for x in dist[p]:\n","            if t<int(budget/10):\n","                if x[1] not in index:\n","                    index.append(x[1])\n","                    t+=1\n","                else:\n","                    pass\n","            else:\n","                pass\n","        # index.extend([x[1] for x in dist[p][:int(budget/num_clusters)]])\n","    return list(set(index))"],"metadata":{"id":"JbjX7EZuyR9I"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"z3_9_cOGP8Eb"},"source":["### Entropy sampling"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LvF0xOObP5UB"},"outputs":[],"source":["def entropy_sampling(model, dataset, unlab_idx, budget, device = \"cuda\"):\n","    if device == None:\n","        print(\"Using CPU\")\n","        device = torch.device(\"cpu\")\n","    elif device == \"cuda\":\n","        if torch.cuda.is_available():\n","            print(\"Using CUDA\")\n","            device = torch.device(\"cuda\")\n","        else:\n","            print(\"Cuda not found. Using CPU.\")\n","            device =torch.device(\"cpu\")\n","    elif device == \"mps\":\n","        if torch.has_mps:\n","            print(\"Using MPS\")\n","            device = torch.device(\"mps\")\n","        else:\n","            print(\"MPS not found. Using CPU\")\n","            device = torch.device(\"cpu\")\n","    model.to(device)\n","    probs = []\n","    for i in unlab_idx:\n","      inputs, labels = dataset[i]\n","      # inputs, labels = inputs.to(device), labels\n","      probs.append(model(inputs.unsqueeze(dim = 0).to(device)).detach().cpu())\n","    probs = F.softmax(torch.stack(probs)).detach().cpu().numpy()\n","    ent = entropy(probs.squeeze(), axis = 1)\n","    R = list(zip(ent, unlab_idx))\n","    R.sort(reverse = True)\n","    if len(probs)<=budget:\n","      selection = [x[1] for x in R]\n","    else:\n","      selection = [x[1] for x in R[:budget]]\n","    return list(selection)"]},{"cell_type":"markdown","metadata":{"id":"AG4-Gx-HfEub"},"source":["### Engrad sampling"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x9uQQfUvQKha"},"outputs":[],"source":["device = torch.device(\"cuda\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uLx3ehpDfEub"},"outputs":[],"source":["def engrad(model, dataset, unlab_idx, budget, num_clusters = 10):\n","    model.to(device)\n","    grad = []\n","    ind = []\n","    for i in unlab_idx:\n","      data, label = dataset[i]\n","      data = data.to(device)\n","      data.requires_grad = True\n","      op = model(data.unsqueeze(dim = 0))\n","      loss = torch.sum(entr(F.softmax(op, dim = 1)))\n","      loss.backward()\n","      grad.append(torch.flatten(data.grad,start_dim = 0))\n","      ind.append(i)\n","      X=torch.stack(grad)\n","    cluster_ids_x, cluster_centers = kmeans(X=X, num_clusters=num_clusters, distance='euclidean', device=device)\n","    dist = {i:[] for i in range(num_clusters)}\n","    for z in range(num_clusters):\n","        d = [[torch.linalg.norm(grad[j].to(\"cuda\")-cluster_centers[z].to(\"cuda\")).item(),ind[j]] for j in range(len(grad))]\n","        dist[z].extend(d)\n","        dist[z].sort()\n","    index = []\n","    for p in range(num_clusters):\n","        t = 0\n","        for x in dist[p]:\n","          if t<int(budget/num_clusters):\n","            if x[1] not in index:\n","              index.append(x[1])\n","              t+=1\n","            else:\n","              pass\n","          else:\n","            pass\n","        # index.extend([x[1] for x in dist[p][:int(budget/num_clusters)]])\n","    return list(set(index))"]},{"cell_type":"markdown","metadata":{"id":"0HpI2K4afEub"},"source":["## Loss sampling"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_Qgs81MWfEub"},"outputs":[],"source":["def loss_dep(model, dataset, unlab_idx, prev_idx, budget, clusters = 10):\n","  model.to(device)\n","  model.eval()\n","  losses = []\n","  prev_data = Subset(dataset, prev_idx)\n","  prev_data = conv_dataset(prev_data)\n","  prev_loader = DataLoader(prev_data, batch_size = 1)\n","  j = 0\n","  for data,label in prev_loader:\n","    # data, label = prev_data[j]\n","    # data, label = dataset[i]\n","    data, label = data.to(device), torch.tensor(label).to(device)\n","    op = model(data)\n","    loss = criterion(op,label)\n","    j+=1\n","    losses.append([loss.item(),j])\n","  # loss_list = [[losses[q].item(),q] for q in range(len(present_data))]\n","  # loss_list = []\n","  # for q in range(len(present_data)):\n","  #   loss_list.append([losses[q].item(),q])\n","  losses.sort(reverse = True)\n","  index = []\n","  for i in range(clusters):\n","    index.append(losses[i][1])\n","  dist = {d:[] for d in index}\n","  for z in index:\n","    norms = [[torch.linalg.norm(dataset[a][0].to(\"cuda\") - dataset[z][0].to(\"cuda\")),a] for a in unlab_idx]\n","    dist[z].extend(norms)\n","    dist[z].sort()\n","  index2 = []\n","  for p in index:\n","    t = 0\n","    for x in dist[p]:\n","      if t<int(budget/clusters):\n","        if x[1] not in index2:\n","          index2.append(x[1])\n","          t+=1\n","        else:\n","          pass\n","      else:\n","        pass\n","    # index2.extend([x[1] for x in dist[p][:int(budget/clusters)]])\n","  return list(set(index2))"]},{"cell_type":"markdown","metadata":{"id":"yyUMV8vPfEuc"},"source":["### Extraction loop essentials"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RIq8G9gofEuc"},"outputs":[],"source":["def train_cifar(traindata, valloader, model, epochs, criterion, lr = 0.001, device = None, model_name = \"model_name.pt\", save = True, val_loss_list = []):\n","    if device == None:\n","        print(\"Using CPU\")\n","        device = torch.device(\"cpu\")\n","    elif device == \"cuda\":\n","        if torch.cuda.is_available():\n","            print(\"Using CUDA\")\n","            device = torch.device(\"cuda\")\n","        else:\n","            print(\"Cuda not found. Using CPU.\")\n","            device =torch.device(\"cpu\")\n","    elif device == \"mps\":\n","        if torch.has_mps:\n","            print(\"Using MPS\")\n","            device = torch.device(\"mps\")\n","        else:\n","            print(\"MPS not found. Using CPU\")\n","            device = torch.device(\"cpu\")\n","    model.to(device)\n","    traindata = conv_dataset(traindata)\n","    trainloader = DataLoader(traindata, batch_size = 128, shuffle = True)\n","    train_loss_list = []\n","    # val_loss_list = []\n","    param_groups = [\n","    {'params':model.base.parameters(),'lr':.0001},\n","    {'params':model.final.parameters(),'lr':.001}\n","    ]\n","    optimizer = Adam(param_groups)\n","    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=1, gamma=0.6)\n","#     optimizer = optim.SGD(model.parameters(), lr=lr, weight_decay = 0.01, momentum = 0.75)\n","    # scheduler = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr = 0.01, epochs=epochs, steps_per_epoch=len(trainloader))\n","    for epoch in range(epochs):\n","        t1 = time.time()\n","        print(\"Epoch: \", epoch+1)\n","        model.train()\n","        train_loss = 0\n","        for  i, (inputs, labels) in enumerate(trainloader):\n","            # inputs, labels = data\n","            inputs, labels = inputs.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(inputs)\n","            loss = criterion(outputs,labels) #criterion(outputs,labels)\n","            loss.backward()\n","            optimizer.step()\n","            scheduler.step()\n","            train_loss+=loss.item()\n","        train_loss_list.append(train_loss/len(trainloader))\n","        print(\"Train loss: \",train_loss/len(trainloader))\n","        model.eval()\n","        loss_val = 0\n","        for j, (ip,lbl) in enumerate(valloader):\n","            # ip, lbl = datas\n","            ip, lbl = ip.to(device), lbl.to(device)\n","            op = model(ip)\n","            val_loss = criterion(op, lbl) #criterion(op, lbl)\n","            loss_val += val_loss.item()\n","        val_loss_list.append(loss_val/len(valloader))\n","        print(\"Validation loss: \", val_loss_list[-1])\n","        print(\"Epoch time ----- \",time.time() - t1, \" sec\")\n","        if save:    \n","            if val_loss_list[-1]<=min(val_loss_list):\n","                print(\"validation loss minimum, saving model\")\n","                torch.save(model.state_dict(),\"/content/drive/MyDrive/\"+model_name)\n","    return train_loss_list, val_loss_list"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KpDJ3ISnfEud"},"outputs":[],"source":["def test_cifar(model, testloader, device = None):\n","    correct = 0\n","    total = 0\n","    model.to(device)\n","    if device == None:\n","        print(\"Using CPU\")\n","        device = torch.device(\"cpu\")\n","    elif device == \"cuda\":\n","        if torch.cuda.is_available():\n","            print(\"Using CUDA\")\n","            device = torch.device(\"cuda\")\n","        else:\n","            print(\"Cuda not found. Using CPU.\")\n","            device =torch.device(\"cpu\")\n","    elif device == \"mps\":\n","        if torch.has_mps:\n","            print(\"Using MPS\")\n","            device = torch.device(\"mps\")\n","        else:\n","            print(\"MPS not found. Using CPU\")\n","            device = torch.device(\"cpu\")\n","    # since we're not training, we don't need to calculate the gradients for our outputs\n","    with torch.no_grad():\n","        for data in testloader:\n","            images, labels = data\n","            images, labels = images.to(device), labels.to(device)\n","            # calculate outputs by running images through the network\n","            outputs = model(images)\n","            # the class with the highest energy is what we choose as prediction\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","    return 100*correct/total"]},{"cell_type":"code","source":["def entropy_train(model, dataset, val_loader, test_loader, sample_list, epochs = 20, LR = 0.001, bs = 20, model_name = \"entropy_resnet.pt\"):\n","  device = torch.device(\"cuda\")\n","  model.to(device)\n","  all_idx = range(len(dataset))\n","  train_idx = random.sample(range(0,len(dataset)), sample_list[0])\n","  train_data = Subset(dataset, train_idx)\n","  train_loader = DataLoader(train_data, batch_size = bs, shuffle = True)\n","  remain_idx = list(set(all_idx) - set(train_idx))\n","  test_acc_list = [test_cifar(model, test_loader, device = device)]\n","  print(\"Test accuracy: \", test_acc_list[-1])\n","  train_loss_list = []\n","  valid_loss_list = []\n","  samples = [len(train_idx)]\n","  print(\"Training samples: \", samples[-1])\n","  train_list, val_list = train_cifar(train_data, val_loader, model, epochs = epochs, criterion = nn.CrossEntropyLoss(), lr = LR, device = device, model_name = model_name, save =True)\n","  train_loss_list.extend(train_list)\n","  # valid_loss_list = val_list\n","  valid_loss_list.extend(val_list)\n","  test_acc_list.append(test_cifar(model, test_loader, device = device))\n","  print(\"Test accuracy: \", test_acc_list[-1])\n","  for sample in sample_list[1:]:\n","    print(sample)\n","    new_idx = entropy_sampling(model, dataset, remain_idx, budget = sample - len(train_idx), device = \"cuda\")\n","    remain_idx = list(set(remain_idx) - set(new_idx))\n","    train_idx = list(set(train_idx + new_idx))\n","    train_data = Subset(dataset, train_idx)\n","    train_list, val_list = train_cifar(train_data, val_loader, model, epochs = int(epochs), criterion = nn.CrossEntropyLoss(), lr = LR, device = device, model_name = model_name, save =True, val_loss_list = [])\n","    train_loss_list.extend(train_list)\n","    torch.save(model.state_dict(),\"/content/drive/MyDrive/\"+model_name)\n","    # valid_loss_list = val_list\n","    valid_loss_list.extend(val_list)\n","\n","    print(\"Testing\")\n","    test_acc_list.append(test_cifar(model, test_loader, device = device))\n","    print(\"Test accuracy: \", test_acc_list[-1])\n","\n","  return train_loss_list, valid_loss_list, test_acc_list"],"metadata":{"id":"2bAAWkxSsxKZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def kmeans_train(model, dataset, val_loader, test_loader, sample_list, epochs = 20, LR = 0.001, bs = 20, model_name = \"entropy_resnet.pt\"):\n","  device = torch.device(\"cuda\")\n","  model.to(device)\n","  all_idx = range(len(dataset))\n","  train_idx = random.sample(range(0,len(dataset)), sample_list[0])\n","  train_data = Subset(dataset, train_idx)\n","  train_loader = DataLoader(train_data, batch_size = bs, shuffle = True)\n","  remain_idx = list(set(all_idx) - set(train_idx))\n","  test_acc_list = [test_cifar(model, test_loader, device = device)]\n","  print(\"Test accuracy: \", test_acc_list[-1])\n","  train_loss_list = []\n","  valid_loss_list = []\n","  samples = [len(train_idx)]\n","  print(\"Training samples: \", samples[-1])\n","  train_list, val_list = train_cifar(train_data, val_loader, model, epochs = epochs, criterion = nn.CrossEntropyLoss(), lr = LR, device = device, model_name = model_name, save =True)\n","  train_loss_list.extend(train_list)\n","  # valid_loss_list = val_list\n","  valid_loss_list.extend(val_list)\n","  test_acc_list.append(test_cifar(model, test_loader, device = device))\n","  print(\"Test accuracy: \", test_acc_list[-1])\n","  for sample in sample_list[1:]:\n","    print(sample)\n","    new_idx = kmeans_sampling(dataset, remain_idx, budget = sample - len(train_idx), device = \"cuda\")\n","    remain_idx = list(set(remain_idx) - set(new_idx))\n","    train_idx = list(set(train_idx + new_idx))\n","    train_data = Subset(dataset, train_idx)\n","    train_list, val_list = train_cifar(train_data, val_loader, model, epochs = int(epochs), criterion = nn.CrossEntropyLoss(), lr = LR, device = device, model_name = model_name, save =True, val_loss_list = [])\n","    train_loss_list.extend(train_list)\n","    torch.save(model.state_dict(),\"/content/drive/MyDrive/\"+model_name)\n","    # valid_loss_list = val_list\n","    valid_loss_list.extend(val_list)\n","\n","    print(\"Testing\")\n","    test_acc_list.append(test_cifar(model, test_loader, device = device))\n","    print(\"Test accuracy: \", test_acc_list[-1])\n","\n","  return train_loss_list, valid_loss_list, test_acc_list"],"metadata":{"id":"txBtrjlKzefF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Function to compute KL divergence and agreement between $f^T$ and $f^E$"],"metadata":{"id":"ZjpYN3xOhydq"}},{"cell_type":"code","source":["def dist_equiv_log(attack_model, dataloader, classes = 10):\n","\n","  classes = list(range(classes))\n","  y_t = []\n","  for j,k in dataloader:\n","    y_t.extend(list(torch.argmax(model(j.to(device)), dim = 1).cpu().numpy()))\n","\n","  y_e = []\n","  for j,k in dataloader:\n","    y_e.extend(list(torch.argmax(attack_model(j.to(device)), dim = 1).cpu().numpy()))\n","\n","  agreement = np.mean(np.array(y_t) == np.array(y_e))\n","  y_t_c = []\n","  y_e_c = []\n","\n","  for i in classes:\n","    y_t_c.append(sum(np.array(y_t) == i)+1)\n","    y_e_c.append(sum(np.array(y_e) == i)+1)\n","\n","  y_t_p = np.array(y_t_c)/(len(y_t)+len(classes))\n","  y_e_p = np.array(y_e_c)/(len(y_e)+len(classes))\n","\n","  kl_div = entropy(y_t_p, y_e_p)\n","  print(kl_div)\n","  return kl_div, agreement"],"metadata":{"id":"nKHIEXL-hxVU"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Function to calculate parametric distance between $f^T$ and $f^E$"],"metadata":{"id":"tFCIkBX-iCVB"}},{"cell_type":"code","source":["def distance(attack_model):\n","  p = model.final.weight.view(-1).detach().cpu().numpy()\n","  q = attack_model.final.weight.view(-1).detach().cpu().numpy()\n","\n","  p = p/np.linalg.norm(p)\n","  q = q/np.linalg.norm(q)\n","\n","  return np.linalg.norm(p-q)"],"metadata":{"id":"4DcBFeIDh-JQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gCqxRUiHfEud"},"outputs":[],"source":["def final_loop2(model, dataset, val_loader, test_loader, budget = 300, init_points = 1000, rounds = 20, epochs = 20, LR = 0.001, bs = 20, gamma1 = 0.8, gamma2 = 0.8, sim = False, model_name = \"engrad.pt\"):\n","  device = torch.device(\"cuda:0\")\n","  model.to(device)\n","  all_idx = range(len(dataset))\n","  train_idx = random.sample(range(0,len(dataset)), init_points)\n","  train_data = Subset(dataset, train_idx)\n","  train_loader = DataLoader(train_data, batch_size = bs, shuffle = True)\n","  remain_idx = list(set(all_idx) - set(train_idx))\n","  test_acc_list = [test_cifar(model, test_loader, device = device)]\n","  print(\"Test accuracy: \", test_acc_list[-1])\n","  kl_data,_ = random_split(unlab_dataset,[2000, 11000])\n","  kl_loader = DataLoader(kl_data)\n","  kl_list = []\n","  dist_list = []\n","  agreement = []\n","  kl, agr = dist_equiv_log(model, kl_loader)\n","  kl_list.append(kl)\n","  agreement.append(agr)\n","  dist = distance(model)\n","  dist_list.append(dist)\n","  print(\"KL Divergence:\",kl_list[-1])\n","  print(\"Distance:\", dist)\n","  train_loss_list = []\n","  valid_loss_list = []\n","  samples = [len(train_idx)]\n","  print(\"Training samples: \", samples[-1])\n","  train_list, val_list = train_cifar(train_data, val_loader, model, epochs = epochs, criterion = nn.CrossEntropyLoss(), lr = LR, device = device, model_name = model_name, save =True)\n","  train_loss_list.extend(train_list)\n","  kl, agr = dist_equiv_log(model, kl_loader)\n","  kl_list.append(kl)\n","  agreement.append(agr)\n","  print(\"KL Divergence:\",kl_list[-1])\n","  # valid_loss_list = val_list\n","  valid_loss_list.extend(val_list)\n","  test_acc_list.append(test_cifar(model, test_loader, device = device))\n","  dist = distance(model)\n","  dist_list.append(dist)\n","  print(\"Distance:\", dist)\n","  print(\"Test accuracy: \", test_acc_list[-1])\n","  model2 = Model()\n","  if sim:\n","    probs = []\n","    for data, label in cifar_attack_loader:\n","      data = data.to(device)\n","      probs.extend(victim_model(data).detach().cpu().numpy())\n","  \n","  for r in range(rounds):\n","    print(\"Round: \", r+1)\n","    budget = budget*(1.01)\n","\n","\n","    # Sampling using entropy\n","    print(\"Using entropy sampling\")\n","    if sim:\n","      new_idx = entropy_sampling(model, dataset, remain_idx, budget = int(1.5*budget), device = \"cuda\")\n","    else:\n","      new_idx = entropy_sampling(model, dataset, remain_idx, budget = int(budget), device = \"cuda\")\n","    # remain_idx = list(set(remain_idx) - set(new_idx1))\n","    \n","    # gradient sampling\n","    print(\"Using gradient sampling on \", len(new_idx), \" points\")\n","    new_idx = engrad(model, dataset, new_idx, budget = int(gamma1*len(new_idx)), num_clusters = 10)\n","\n","    # Sampling using loss\n","    print(\"Using loss sampling on \", len(new_idx),\" points\")\n","    new_idx = loss_dep(model, dataset, new_idx, train_idx, budget = (gamma2*len(new_idx)) )\n","\n","    samples.append(len(train_idx)+len(new_idx))\n","    \n","    #Similarity sampling\n","    if sim == True:\n","      print(\"Running similarity sampling\")\n","      new_idx = similarity(victim_model, dataset, probs, remain_idx, budget = int(0.5*len(new_idx)))\n","\n","    remain_idx = list(set(remain_idx) - set(new_idx))\n","\n","    train_idx = list(set(train_idx + new_idx))\n","    # samples.append(len(train_idx))\n","\n","    train_data = Subset(dataset, train_idx)\n","    # train_loader = DataLoader(train_data, batch_size = bs, shuffle = True)\n","\n","    print(\"Budget: \", samples[-1])\n","    print(\"Training samples: \", len(train_idx))\n","    print(\"Training\")\n","    epochs = 1.02*epochs\n","    train_list, val_list = train_cifar(train_data, val_loader, model, epochs = int(epochs), criterion = nn.CrossEntropyLoss(), lr = LR, device = device, model_name = model_name, save =True, val_loss_list = [])\n","    train_loss_list.extend(train_list)\n","    torch.save(model.state_dict(),\"/home/pratik/Downloads/Marich/RESNET/models/new_\"+model_name)\n","    # valid_loss_list = val_list\n","    valid_loss_list.extend(val_list)\n","#     model2.load_state_dict(torch.load(\"/home/pratik/Downloads/Marich/RESNET/models/\"+model_name))\n","    # print(\"Loading best model\")\n","    # model.load_state_dict(torch.load(\"/content/\" + model_name))\n","    kl, agr = dist_equiv_log(model, kl_loader)\n","    kl_list.append(kl)\n","    agreement.append(agr)\n","    dist = distance(model)\n","    dist_list.append(dist)\n","    print(\"Distance:\", dist)\n","    print(\"KL Divergence:\",kl_list[-1])\n","\n","    print(\"Testing\")\n","    test_acc_list.append(test_cifar(model, test_loader, device = device))\n","    print(\"Test accuracy: \", test_acc_list[-1])\n","\n","  return train_loss_list, valid_loss_list, test_acc_list, samples, kl_list, dist_list, agreement"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WG1u5q0IfEud"},"outputs":[],"source":["train_on_gpu=torch.cuda.is_available()"]},{"cell_type":"markdown","source":["## Importing attack dataset STL10"],"metadata":{"id":"-fsy58DO4_Vc"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"51t4jk1_8Rzk","outputId":"f3893d14-cc35-4423-8a9b-fb8900dd34c0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668525442771,"user_tz":-330,"elapsed":21678,"user":{"displayName":"Study Material","userId":"04503814293963147876"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Files already downloaded and verified\n","Files already downloaded and verified\n"]}],"source":["attack_transform = transforms.Compose(\n","    [transforms.Resize(32, interpolation=transforms.InterpolationMode.BILINEAR),\n","     transforms.Resize(224),\n","     transforms.ToTensor(),\n","     transforms.Normalize((0.4467, 0.4398, 0.4066), (0.2603, 0.2565, 0.2712))\n","    ])\n","\n","attack_set = torchvision.datasets.STL10(root=\"./\", split=\"train\",\n","                                        download=True, transform=attack_transform)\n","attack_set2 = torchvision.datasets.STL10(root=\"./\", split=\"test\",\n","                                        download=True, transform=attack_transform)\n","# attack_set2=torchvision.datasets.STL10(root=\"./\", split=\"unlabeled\",\n","#                                         download=True, transform=attack_transform)\n","# attack_set2,remains = random_split(attack_set2,[10000,90000])\n","# attack_loader = torch.utils.data.DataLoader(attack_set, batch_size=len(attack_set))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uwaxXzLUW_BN"},"outputs":[],"source":["attack_set = ConcatDataset([attack_set,attack_set2])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KFgWhPI58Rzk","outputId":"ffab2c9e-2e1a-4814-8957-717e397b5d9c","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1668525446632,"user_tz":-330,"elapsed":2,"user":{"displayName":"Study Material","userId":"04503814293963147876"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["13000"]},"metadata":{},"execution_count":23}],"source":["len(attack_set)"]},{"cell_type":"markdown","source":["## Getting (x, f^T(x))"],"metadata":{"id":"vDJ3awZ_5J84"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Dv7iQT9XXJOq"},"outputs":[],"source":["unlab_x = []\n","unlab_y = []\n","lab_y = []\n","for j,k in attack_set:\n","    j = j\n","    unlab_x.append(j)\n","    lab_y.append(k)\n","    unlab_y.append(torch.argmax(model(j.to(\"cuda\").unsqueeze(dim = 0)), dim = 1).item())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R6p_UPLF8Rzk","outputId":"1868f511-1721-41be-fcb2-ca767de5a0af"},"outputs":[{"data":{"text/plain":["0.47746153846153844"]},"execution_count":58,"metadata":{},"output_type":"execute_result"}],"source":["sum(np.array(unlab_y) == np.array(lab_y))/13000"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UZznl5QhXgCF"},"outputs":[],"source":["unlab_dataset = dataset(unlab_x, unlab_y)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ol3TyHHr8Rzm"},"outputs":[],"source":["unlab_loader = DataLoader(unlab_dataset, batch_size = 128)"]},{"cell_type":"markdown","source":["## Defining attack ResNet18 model"],"metadata":{"id":"t7Y3VBLD5cPL"}},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":1269,"status":"ok","timestamp":1668489646395,"user":{"displayName":"Pratik Karmakar","userId":"15395690303817668883"},"user_tz":-330},"id":"5v9UdcG9O3mv","outputId":"1557c058-30a3-494d-80f3-7b37a910f306","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n","  f\"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, \"\n","/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]}],"source":["attack_model = Model().cuda()\n","criterion = nn.CrossEntropyLoss()\n","attack_param_groups = [\n","    {'params':attack_model.base.parameters(),'lr':.0001},\n","    {'params':attack_model.final.parameters(),'lr':.001}\n","]\n","optimizer = Adam(attack_param_groups)\n","lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=1, gamma=0.1)\n","states = {}"]},{"cell_type":"code","source":["samples_resnet = [1500,1750,2000,2250,2500,2750,3010,3270,3530,3800,4070,4350,4630,4910,5190,5470,5760,6050,6350,6650,6950]"],"metadata":{"id":"i2_avGq3usu2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Extraction using MARICH"],"metadata":{"id":"t0J9RK97iZcL"}},{"cell_type":"code","source":["kl_marich = []\n","dist_marich = []\n","agree_marich = []\n","acc_marich = []\n","\n","for i in tqdm(range(5)):\n","    resnet_marich_att = Model().cuda()\n","    tl_log, vl_log, tal_log, samp_log, kl_log, dist, agree = final_loop2(resnet_marich_att, unlab_dataset, valloader, testloader, budget = 400, init_points = 1500, rounds = 20, epochs = 4, LR = 0.0004, bs = 20, gamma1 = 0.8, gamma2 = 0.8, sim = False, model_name = \"marich_resnet.pt\")\n","\n","    acc_marich.append(tal_log)\n","    kl_marich.append(kl_log)\n","    dist_marich.append(dist)\n","    agree_marich.append(agree)\n","\n","    np.save(\"/home/pratik/Downloads/Marich/RESNET/marich_kl/acc_marich_inf.npy\", np.array(acc_marich))\n","    np.save(\"/home/pratik/Downloads/Marich/RESNET/marich_kl/kl_marich_inf.npy\", np.array(kl_marich))\n","    np.save(\"/home/pratik/Downloads/Marich/RESNET/marich_kl/dist_marich_inf.npy\", np.array(dist_marich))\n","    np.save(\"/home/pratik/Downloads/Marich/RESNET/marich_kl/agree_marich_inf.npy\", np.array(agree_marich))"],"metadata":{"id":"72zyazjviXMh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Extraction using Kmeans sampling"],"metadata":{"id":"4W0DgDQV5jQZ"}},{"cell_type":"code","source":["import pickle\n","from tqdm import tqdm\n","kmeans_acc = {i:[] for i in range(5)}\n","for i in tqdm(range(5)):\n","  print(i)\n","  resnet_kmeans_att = Model().cuda()\n","  tll_ent, vll_ent, tal_ent = kmeans_train(resnet_kmeans_att, unlab_dataset, valloader, testloader, samples_resnet, epochs = 4, LR = 0.0004, bs = 32, model_name = \"entropy_log.pt\")\n","  kmeans_acc[i] = tal_ent\n","  with open('/content/drive/MyDrive/resnet_kmeans_acc.pickle', 'wb') as handle:\n","      pickle.dump(kmeans_acc, handle, protocol=pickle.HIGHEST_PROTOCOL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ww3cacTX01_4","outputId":"c839abdc-3e1f-48c5-b554-10cc08842a15"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/5 [00:00<?, ?it/s]/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n","  f\"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, \"\n","/usr/local/lib/python3.7/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"output_type":"stream","name":"stdout","text":["0\n","Test accuracy:  10.44\n","Training samples:  1500\n","Epoch:  1\n","Train loss:  2.09243106842041\n","Validation loss:  2.675010217666626\n","Epoch time -----  25.03199815750122  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.8624114592870076\n","Validation loss:  2.6760332736968993\n","Epoch time -----  24.37675666809082  sec\n","Epoch:  3\n","Train loss:  1.8521449267864227\n","Validation loss:  2.6782348194122316\n","Epoch time -----  25.129795789718628  sec\n","Epoch:  4\n","Train loss:  1.835910787185033\n","Validation loss:  2.6806426601409914\n","Epoch time -----  24.11050295829773  sec\n"]}]},{"cell_type":"markdown","source":["## Extraction using entropy sampling"],"metadata":{"id":"gIRFNgJb5nle"}},{"cell_type":"code","source":["import pickle\n","from tqdm import tqdm\n","entropy_acc = {i:[] for i in range(5)}\n","for i in tqdm(range(5)):\n","  print(i)\n","  resnet_entropy_att = Model().cuda()\n","  optimizer = Adam(attack_param_groups)\n","  lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=1, gamma=0.1)\n","  tll_ent, vll_ent, tal_ent = entropy_train(resnet_entropy_att, unlab_dataset, valloader, testloader, samples_resnet, epochs = 4, LR = 0.0004, bs = 32, model_name = \"entropy_log.pt\")\n","  entropy_acc[i] = tal_ent\n","with open('/content/drive/MyDrive/resnet_entropy_acc.pickle', 'wb') as handle:\n","    pickle.dump(entropy_acc, handle, protocol=pickle.HIGHEST_PROTOCOL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"154VFiRPuQmn","outputId":"bcb4bff9-9869-4077-aaf4-428b1c3e5be6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["\r  0%|          | 0/5 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["0\n","Test accuracy:  11.88\n","Training samples:  1500\n","Epoch:  1\n","Train loss:  1.8959783414999645\n","Validation loss:  2.7412501831054685\n","Epoch time -----  24.681193351745605  sec\n","Epoch:  2\n","Train loss:  1.6824792722860973\n","Validation loss:  2.7330831680297853\n","Epoch time -----  24.14396572113037  sec\n","Epoch:  3\n","Train loss:  1.7016352812449138\n","Validation loss:  2.7314516792297363\n","Epoch time -----  24.207789659500122  sec\n","Epoch:  4\n","Train loss:  1.6762212912241619\n","Validation loss:  2.734635850906372\n","Epoch time -----  24.14643144607544  sec\n","Test accuracy:  9.42\n","1750\n","Using CUDA\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:25: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n"]},{"output_type":"stream","name":"stdout","text":["Epoch:  1\n","Train loss:  1.4126357265881129\n","Validation loss:  3.56106459236145\n","Epoch time -----  24.941463470458984  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.3384013601711817\n","Validation loss:  3.563860029220581\n","Epoch time -----  24.909714698791504  sec\n","Epoch:  3\n","Train loss:  1.3205943873950414\n","Validation loss:  3.5626451034545896\n","Epoch time -----  24.976435899734497  sec\n","Epoch:  4\n","Train loss:  1.3536158629826136\n","Validation loss:  3.567047861099243\n","Epoch time -----  25.508306741714478  sec\n","Testing\n","Test accuracy:  9.95\n","2000\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3378658965229988\n","Validation loss:  3.8277529582977294\n","Epoch time -----  25.80523943901062  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2916583716869354\n","Validation loss:  3.8200113162994387\n","Epoch time -----  25.705039024353027  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.278213918209076\n","Validation loss:  3.81524847984314\n","Epoch time -----  25.60938572883606  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2806102707982063\n","Validation loss:  3.818621620178223\n","Epoch time -----  25.750573873519897  sec\n","Testing\n","Test accuracy:  9.87\n","2250\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2923385633362665\n","Validation loss:  4.091843015670777\n","Epoch time -----  26.31276273727417  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2494615779982672\n","Validation loss:  4.062763893127442\n","Epoch time -----  26.420350790023804  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2509297132492065\n","Validation loss:  4.062220819473267\n","Epoch time -----  26.358414888381958  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2656936248143513\n","Validation loss:  4.0553629722595215\n","Epoch time -----  26.378029584884644  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.89\n","2500\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2809439182281495\n","Validation loss:  4.104192319869995\n","Epoch time -----  27.19699239730835  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2196836531162263\n","Validation loss:  4.095231685638428\n","Epoch time -----  27.21619963645935  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2477373868227004\n","Validation loss:  4.095829860687256\n","Epoch time -----  27.738415718078613  sec\n","Epoch:  4\n","Train loss:  1.2331706881523132\n","Validation loss:  4.091224481582642\n","Epoch time -----  26.94830870628357  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.75\n","2750\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.283905099738728\n","Validation loss:  4.112911535263062\n","Epoch time -----  27.844835996627808  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2363972663879395\n","Validation loss:  4.105616493225098\n","Epoch time -----  27.98848271369934  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2332828857681968\n","Validation loss:  4.105116731643677\n","Epoch time -----  27.830175638198853  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.23950855569406\n","Validation loss:  4.097526687622071\n","Epoch time -----  27.812442302703857  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.79\n","3010\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.284815326333046\n","Validation loss:  4.10451251411438\n","Epoch time -----  28.59700059890747  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2446425557136536\n","Validation loss:  4.083631797790527\n","Epoch time -----  28.505024909973145  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2390413731336594\n","Validation loss:  4.093711811065674\n","Epoch time -----  28.525819063186646  sec\n","Epoch:  4\n","Train loss:  1.2269977728525798\n","Validation loss:  4.076867040634156\n","Epoch time -----  28.35011386871338  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.05\n","3270\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2666009068489075\n","Validation loss:  4.265736988067627\n","Epoch time -----  28.89150834083557  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2292004090089064\n","Validation loss:  4.264244243621826\n","Epoch time -----  29.549771785736084  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2271380974696233\n","Validation loss:  4.265046489715576\n","Epoch time -----  29.04356360435486  sec\n","Epoch:  4\n","Train loss:  1.2292995154857635\n","Validation loss:  4.265953289031982\n","Epoch time -----  28.759225845336914  sec\n","Testing\n","Test accuracy:  10.31\n","3530\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2711389745984758\n","Validation loss:  4.317074890136719\n","Epoch time -----  29.719505071640015  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2180289583546775\n","Validation loss:  4.301198116302491\n","Epoch time -----  29.678126573562622  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.203928223678044\n","Validation loss:  4.302758186340332\n","Epoch time -----  29.645434617996216  sec\n","Epoch:  4\n","Train loss:  1.2066701927355357\n","Validation loss:  4.294293148040771\n","Epoch time -----  29.52999496459961  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.26\n","3800\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2531825343767802\n","Validation loss:  4.5243046207427975\n","Epoch time -----  30.26219606399536  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2113180756568909\n","Validation loss:  4.508898048400879\n","Epoch time -----  30.266465663909912  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.222147568066915\n","Validation loss:  4.513122127532959\n","Epoch time -----  30.667874097824097  sec\n","Epoch:  4\n","Train loss:  1.2167970776557921\n","Validation loss:  4.500388427734375\n","Epoch time -----  30.32050585746765  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.17\n","4070\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.248246293514967\n","Validation loss:  4.529024015426636\n","Epoch time -----  31.8267560005188  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2150211799889803\n","Validation loss:  4.506717470169067\n","Epoch time -----  30.95664954185486  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2095476612448692\n","Validation loss:  4.509107772827148\n","Epoch time -----  31.195622205734253  sec\n","Epoch:  4\n","Train loss:  1.2198188435286283\n","Validation loss:  4.524203763961792\n","Epoch time -----  31.18064284324646  sec\n","Testing\n","Test accuracy:  10.16\n","4350\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2422455847263336\n","Validation loss:  4.666137306213379\n","Epoch time -----  31.956392288208008  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2205169376204996\n","Validation loss:  4.6584168128967285\n","Epoch time -----  31.968915700912476  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.207580145667581\n","Validation loss:  4.6330003490448\n","Epoch time -----  32.1348819732666  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.215908276684144\n","Validation loss:  4.644387870788575\n","Epoch time -----  31.940775871276855  sec\n","Testing\n","Test accuracy:  10.32\n","4630\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2510180473327637\n","Validation loss:  4.658972869873047\n","Epoch time -----  32.77735471725464  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2156763012344773\n","Validation loss:  4.680230327606202\n","Epoch time -----  32.68568444252014  sec\n","Epoch:  3\n","Train loss:  1.2139190242097184\n","Validation loss:  4.626252019882203\n","Epoch time -----  32.69246768951416  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2376877746066532\n","Validation loss:  4.660482498168945\n","Epoch time -----  33.11537051200867  sec\n","Testing\n","Test accuracy:  10.72\n","4910\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.272696355978648\n","Validation loss:  4.7568622589111325\n","Epoch time -----  33.79264044761658  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2237086036266425\n","Validation loss:  4.741102962493897\n","Epoch time -----  33.729501724243164  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2196440482750917\n","Validation loss:  4.74892995262146\n","Epoch time -----  33.65966558456421  sec\n","Epoch:  4\n","Train loss:  1.225083834085709\n","Validation loss:  4.720800621032715\n","Epoch time -----  33.60599899291992  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.33\n","5190\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2553020512185447\n","Validation loss:  4.834059606552124\n","Epoch time -----  34.76231503486633  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.238543302547641\n","Validation loss:  4.7928751220703125\n","Epoch time -----  35.49184966087341  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2295094176036556\n","Validation loss:  4.80523395729065\n","Epoch time -----  34.74799108505249  sec\n","Epoch:  4\n","Train loss:  1.237558357599305\n","Validation loss:  4.81656809425354\n","Epoch time -----  34.732176065444946  sec\n","Testing\n","Test accuracy:  10.78\n","5470\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2610017227572063\n","Validation loss:  4.661818059921265\n","Epoch time -----  35.79263877868652  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2400058355442314\n","Validation loss:  4.6592466793060305\n","Epoch time -----  35.544602155685425  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2419967582059461\n","Validation loss:  4.647655138015747\n","Epoch time -----  35.69229984283447  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2398709502331047\n","Validation loss:  4.6496969432830815\n","Epoch time -----  36.04644751548767  sec\n","Testing\n","Test accuracy:  10.49\n","5760\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.265536477830675\n","Validation loss:  4.643222002029419\n","Epoch time -----  36.435765981674194  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2214057193862067\n","Validation loss:  4.643223384857178\n","Epoch time -----  36.41197323799133  sec\n","Epoch:  3\n","Train loss:  1.2386909392144945\n","Validation loss:  4.6368093509674075\n","Epoch time -----  36.26259255409241  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2260624633895025\n","Validation loss:  4.634090734481812\n","Epoch time -----  36.34088754653931  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.43\n","6050\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2472989074885845\n","Validation loss:  4.662426357269287\n","Epoch time -----  37.3381769657135  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.234197950611512\n","Validation loss:  4.642889430999756\n","Epoch time -----  37.39450001716614  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2369285461803277\n","Validation loss:  4.663985382080078\n","Epoch time -----  37.314478158950806  sec\n","Epoch:  4\n","Train loss:  1.226742314795653\n","Validation loss:  4.6211120185852055\n","Epoch time -----  37.13092756271362  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.36\n","6350\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.274201045036316\n","Validation loss:  4.677807422637939\n","Epoch time -----  38.25257062911987  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2486428642272949\n","Validation loss:  4.695261541366577\n","Epoch time -----  38.174304485321045  sec\n","Epoch:  3\n","Train loss:  1.2520153069496154\n","Validation loss:  4.675398859024048\n","Epoch time -----  37.98636174201965  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2458826780319214\n","Validation loss:  4.671319425582886\n","Epoch time -----  38.07602286338806  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.26\n","6650\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2588600424619822\n","Validation loss:  4.422642555236816\n","Epoch time -----  39.00954985618591  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2409604719051948\n","Validation loss:  4.409412773132324\n","Epoch time -----  39.191256046295166  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2240331516816065\n","Validation loss:  4.427200050354004\n","Epoch time -----  39.52689576148987  sec\n","Epoch:  4\n","Train loss:  1.2227278718581567\n","Validation loss:  4.428026578903198\n","Epoch time -----  38.873735666275024  sec\n","Testing\n","Test accuracy:  9.84\n","6950\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2948332873257724\n","Validation loss:  4.448673250198365\n","Epoch time -----  39.71123909950256  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.277420624819669\n","Validation loss:  4.443651866912842\n","Epoch time -----  39.74178338050842  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2592136664824052\n","Validation loss:  4.442229843139648\n","Epoch time -----  39.69207406044006  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.271071568402377\n","Validation loss:  4.422115587234497\n","Epoch time -----  39.673415660858154  sec\n","validation loss minimum, saving model\n","Testing\n"]},{"output_type":"stream","name":"stderr","text":["\r 20%|██        | 1/5 [1:05:33<4:22:14, 3933.70s/it]"]},{"output_type":"stream","name":"stdout","text":["Test accuracy:  9.31\n","1\n","Test accuracy:  9.95\n","Training samples:  1500\n","Epoch:  1\n","Train loss:  1.9598004718621571\n","Validation loss:  2.667040962219238\n","Epoch time -----  23.84299945831299  sec\n","Epoch:  2\n","Train loss:  1.7149056096871693\n","Validation loss:  2.6839284725189207\n","Epoch time -----  23.63155460357666  sec\n","Epoch:  3\n","Train loss:  1.6851445933183034\n","Validation loss:  2.688269271850586\n","Epoch time -----  23.700865268707275  sec\n","Epoch:  4\n","Train loss:  1.6967086791992188\n","Validation loss:  2.6883896827697753\n","Epoch time -----  23.599993467330933  sec\n","Test accuracy:  10.12\n","1750\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.5115546073232378\n","Validation loss:  3.4840344886779784\n","Epoch time -----  24.559324502944946  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.436821733202253\n","Validation loss:  3.478865451812744\n","Epoch time -----  24.48717951774597  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.4491515159606934\n","Validation loss:  3.4725903129577635\n","Epoch time -----  25.230081796646118  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.414753326347896\n","Validation loss:  3.478125715255737\n","Epoch time -----  24.587979793548584  sec\n","Testing\n","Test accuracy:  10.01\n","2000\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.4543094485998154\n","Validation loss:  3.6894341850280763\n","Epoch time -----  25.17529058456421  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.3782365769147873\n","Validation loss:  3.6697826824188233\n","Epoch time -----  25.40851616859436  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.3731950148940086\n","Validation loss:  3.6650614910125734\n","Epoch time -----  25.298519372940063  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.3696113526821136\n","Validation loss:  3.6659203338623048\n","Epoch time -----  25.278947591781616  sec\n","Testing\n","Test accuracy:  10.06\n","2250\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.376296963956621\n","Validation loss:  3.808271703720093\n","Epoch time -----  26.291501998901367  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.3496237529648676\n","Validation loss:  3.7815347080230715\n","Epoch time -----  26.358330965042114  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.33931299050649\n","Validation loss:  3.7850390758514405\n","Epoch time -----  26.266859769821167  sec\n","Epoch:  4\n","Train loss:  1.3582758439911737\n","Validation loss:  3.7857039699554442\n","Epoch time -----  26.161162614822388  sec\n","Testing\n","Test accuracy:  10.24\n","2500\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3456196248531342\n","Validation loss:  3.8688239898681642\n","Epoch time -----  27.52281928062439  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2963910937309264\n","Validation loss:  3.8630332489013672\n","Epoch time -----  27.425426244735718  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.3089308202266694\n","Validation loss:  3.8717327480316164\n","Epoch time -----  28.346754789352417  sec\n","Epoch:  4\n","Train loss:  1.3094858944416046\n","Validation loss:  3.864263174057007\n","Epoch time -----  27.334779500961304  sec\n","Testing\n","Test accuracy:  10.1\n","2750\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3504390662366694\n","Validation loss:  4.027536123275757\n","Epoch time -----  27.96825885772705  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2913770133798772\n","Validation loss:  4.008921949386597\n","Epoch time -----  28.243897676467896  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.3088630817153237\n","Validation loss:  3.998360736846924\n","Epoch time -----  28.205556392669678  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.289443557912653\n","Validation loss:  4.007982078552246\n","Epoch time -----  28.2476487159729  sec\n","Testing\n","Test accuracy:  10.1\n","3010\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3353571966290474\n","Validation loss:  4.234543407440186\n","Epoch time -----  29.07474422454834  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2922427902619045\n","Validation loss:  4.226734422683716\n","Epoch time -----  29.05802011489868  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2817841122547786\n","Validation loss:  4.219905076980591\n","Epoch time -----  28.86406183242798  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2817222426335018\n","Validation loss:  4.220880701065063\n","Epoch time -----  29.02552342414856  sec\n","Testing\n","Test accuracy:  9.89\n","3270\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3064799469250898\n","Validation loss:  4.18306915473938\n","Epoch time -----  29.72963309288025  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2774733580075777\n","Validation loss:  4.162294696807861\n","Epoch time -----  29.88311266899109  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.277800780076247\n","Validation loss:  4.170088481903076\n","Epoch time -----  29.773154497146606  sec\n","Epoch:  4\n","Train loss:  1.275655326934961\n","Validation loss:  4.165597503662109\n","Epoch time -----  29.71526074409485  sec\n","Testing\n","Test accuracy:  10.09\n","3530\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3164772178445543\n","Validation loss:  4.2771381034851075\n","Epoch time -----  30.27918267250061  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.275128321988242\n","Validation loss:  4.2440410976409915\n","Epoch time -----  30.17882013320923  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2800099551677704\n","Validation loss:  4.236778657913208\n","Epoch time -----  30.269955158233643  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2746456733771734\n","Validation loss:  4.250877761840821\n","Epoch time -----  30.458192825317383  sec\n","Testing\n","Test accuracy:  10.34\n","3800\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.31179275115331\n","Validation loss:  4.405625192642212\n","Epoch time -----  31.05776023864746  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.282594048976898\n","Validation loss:  4.383015424728393\n","Epoch time -----  31.270625352859497  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2777201175689696\n","Validation loss:  4.383447515487671\n","Epoch time -----  31.151610612869263  sec\n","Epoch:  4\n","Train loss:  1.2899904608726502\n","Validation loss:  4.384578035354615\n","Epoch time -----  31.190059185028076  sec\n","Testing\n","Test accuracy:  10.27\n","4070\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2928669042885303\n","Validation loss:  4.362889223098755\n","Epoch time -----  31.970410346984863  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2593156434595585\n","Validation loss:  4.3590749206542965\n","Epoch time -----  31.870124578475952  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.272004995495081\n","Validation loss:  4.350647188186645\n","Epoch time -----  31.74213933944702  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2657249383628368\n","Validation loss:  4.368658536911011\n","Epoch time -----  31.809138298034668  sec\n","Testing\n","Test accuracy:  10.25\n","4350\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2927266534637003\n","Validation loss:  4.191136131286621\n","Epoch time -----  32.67619776725769  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2559368715566748\n","Validation loss:  4.192463766098022\n","Epoch time -----  32.52849054336548  sec\n","Epoch:  3\n","Train loss:  1.2781691621331608\n","Validation loss:  4.1891526527404785\n","Epoch time -----  32.4214551448822  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.260184529949637\n","Validation loss:  4.187675121307373\n","Epoch time -----  32.329920530319214  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.31\n","4630\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2493561570708815\n","Validation loss:  4.1401782264709475\n","Epoch time -----  33.29161262512207  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2246942455704148\n","Validation loss:  4.121689657211304\n","Epoch time -----  33.436490535736084  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.243788480758667\n","Validation loss:  4.1229246120452885\n","Epoch time -----  33.23447227478027  sec\n","Epoch:  4\n","Train loss:  1.232260926349743\n","Validation loss:  4.136064414978027\n","Epoch time -----  33.315773487091064  sec\n","Testing\n","Test accuracy:  9.91\n","4910\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2581591285192049\n","Validation loss:  4.052883678436279\n","Epoch time -----  34.610207080841064  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.248603139168177\n","Validation loss:  4.064378953933716\n","Epoch time -----  34.2562460899353  sec\n","Epoch:  3\n","Train loss:  1.2231836349536211\n","Validation loss:  4.05858334350586\n","Epoch time -----  34.260151624679565  sec\n","Epoch:  4\n","Train loss:  1.2454520066579182\n","Validation loss:  4.041839225769043\n","Epoch time -----  34.0480854511261  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.32\n","5190\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.246233096936854\n","Validation loss:  4.0576328201293945\n","Epoch time -----  34.9887011051178  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2323153687686454\n","Validation loss:  4.0636072273254396\n","Epoch time -----  35.92780900001526  sec\n","Epoch:  3\n","Train loss:  1.2312227007819385\n","Validation loss:  4.047916521072388\n","Epoch time -----  35.08582353591919  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2364450693130493\n","Validation loss:  4.062608963012695\n","Epoch time -----  34.920899629592896  sec\n","Testing\n","Test accuracy:  10.11\n","5470\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.259482594423516\n","Validation loss:  4.253172281265258\n","Epoch time -----  36.10758972167969  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2397292422693829\n","Validation loss:  4.235281263351441\n","Epoch time -----  35.45166063308716  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2310737371444702\n","Validation loss:  4.263082260131836\n","Epoch time -----  35.56610298156738  sec\n","Epoch:  4\n","Train loss:  1.2427760348763577\n","Validation loss:  4.274344100952148\n","Epoch time -----  36.25928592681885  sec\n","Testing\n","Test accuracy:  10.25\n","5760\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2836001581615872\n","Validation loss:  4.438938173294067\n","Epoch time -----  36.3842613697052  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2601875093248156\n","Validation loss:  4.438330257415772\n","Epoch time -----  36.391292333602905  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2741159121195476\n","Validation loss:  4.449399360656738\n","Epoch time -----  36.17410850524902  sec\n","Epoch:  4\n","Train loss:  1.2524562305874294\n","Validation loss:  4.4450906543731685\n","Epoch time -----  36.34095859527588  sec\n","Testing\n","Test accuracy:  10.56\n","6050\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.277737927933534\n","Validation loss:  4.390316467285157\n","Epoch time -----  37.2243378162384  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.261245884001255\n","Validation loss:  4.372935956954956\n","Epoch time -----  37.20943284034729  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2566948160529137\n","Validation loss:  4.37549733543396\n","Epoch time -----  37.138023853302  sec\n","Epoch:  4\n","Train loss:  1.251361606021722\n","Validation loss:  4.400874227523803\n","Epoch time -----  37.1458535194397  sec\n","Testing\n","Test accuracy:  10.65\n","6350\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2697611165046692\n","Validation loss:  4.522888984680176\n","Epoch time -----  38.199321031570435  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2528459572792052\n","Validation loss:  4.500542110443115\n","Epoch time -----  38.85883140563965  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2482164084911347\n","Validation loss:  4.5029764919281\n","Epoch time -----  37.94958829879761  sec\n","Epoch:  4\n","Train loss:  1.2551753389835358\n","Validation loss:  4.51709659576416\n","Epoch time -----  37.932106494903564  sec\n","Testing\n","Test accuracy:  10.02\n","6650\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2817252507576575\n","Validation loss:  4.7667000846862795\n","Epoch time -----  39.03468370437622  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.273020325944974\n","Validation loss:  4.7484951515197755\n","Epoch time -----  38.98825430870056  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2692293020395131\n","Validation loss:  4.744939908981324\n","Epoch time -----  39.01089286804199  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2664723212902362\n","Validation loss:  4.750721334457397\n","Epoch time -----  39.089449882507324  sec\n","Testing\n","Test accuracy:  9.61\n","6950\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.251614838296717\n","Validation loss:  4.6046950340271\n","Epoch time -----  39.789226770401  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2426034439693798\n","Validation loss:  4.639722436904907\n","Epoch time -----  39.78913688659668  sec\n","Epoch:  3\n","Train loss:  1.2343042308633978\n","Validation loss:  4.591297689437866\n","Epoch time -----  39.84448289871216  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2342273517088456\n","Validation loss:  4.606103031158447\n","Epoch time -----  39.76919341087341  sec\n","Testing\n"]},{"output_type":"stream","name":"stderr","text":["\r 40%|████      | 2/5 [2:11:32<3:17:25, 3948.63s/it]"]},{"output_type":"stream","name":"stdout","text":["Test accuracy:  10.0\n","2\n","Test accuracy:  11.39\n","Training samples:  1500\n","Epoch:  1\n","Train loss:  1.6970158815383911\n","Validation loss:  3.1213667755126955\n","Epoch time -----  23.96503520011902  sec\n","Epoch:  2\n","Train loss:  1.5371692677338917\n","Validation loss:  3.1228337936401367\n","Epoch time -----  24.03646969795227  sec\n","Epoch:  3\n","Train loss:  1.5129955410957336\n","Validation loss:  3.123236316680908\n","Epoch time -----  23.865306615829468  sec\n","Epoch:  4\n","Train loss:  1.5345904032389324\n","Validation loss:  3.1239920616149903\n","Epoch time -----  23.988035202026367  sec\n","Test accuracy:  9.99\n","1750\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.4532084209578378\n","Validation loss:  3.7145669898986817\n","Epoch time -----  24.734721899032593  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.3768975223813738\n","Validation loss:  3.6495570030212403\n","Epoch time -----  24.864689588546753  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.3663178597177779\n","Validation loss:  3.6381865520477294\n","Epoch time -----  25.461132287979126  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.3731400626046317\n","Validation loss:  3.6372713375091554\n","Epoch time -----  24.94254159927368  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.94\n","2000\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.4092985019087791\n","Validation loss:  3.749196983337402\n","Epoch time -----  25.6124005317688  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.345655769109726\n","Validation loss:  3.696315803527832\n","Epoch time -----  25.52860713005066  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.3336710035800934\n","Validation loss:  3.6938824367523195\n","Epoch time -----  25.459654569625854  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.3402305468916893\n","Validation loss:  3.6886175670623778\n","Epoch time -----  25.48220157623291  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.02\n","2250\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3267646498150296\n","Validation loss:  3.8637332744598387\n","Epoch time -----  26.132556438446045  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2718000014623005\n","Validation loss:  3.824006290435791\n","Epoch time -----  26.18120241165161  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.3076795604493883\n","Validation loss:  3.8056449069976805\n","Epoch time -----  26.22409200668335  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2828032970428467\n","Validation loss:  3.818600112915039\n","Epoch time -----  26.255840301513672  sec\n","Testing\n","Test accuracy:  9.86\n","2500\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.308792632818222\n","Validation loss:  3.741465515136719\n","Epoch time -----  26.891122579574585  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2789987444877624\n","Validation loss:  3.726975616455078\n","Epoch time -----  27.095967769622803  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.267512184381485\n","Validation loss:  3.7275574913024903\n","Epoch time -----  27.27873182296753  sec\n","Epoch:  4\n","Train loss:  1.2686189830303192\n","Validation loss:  3.732735466003418\n","Epoch time -----  26.875324010849  sec\n","Testing\n","Test accuracy:  9.61\n","2750\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2894332029602744\n","Validation loss:  4.136670240402221\n","Epoch time -----  27.568831205368042  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.259137283671986\n","Validation loss:  4.108440986633301\n","Epoch time -----  27.598626136779785  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2392446723851291\n","Validation loss:  4.104342081069946\n","Epoch time -----  27.5554621219635  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2551429732279344\n","Validation loss:  4.110558540344238\n","Epoch time -----  27.661426067352295  sec\n","Testing\n","Test accuracy:  9.9\n","3010\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.27385559429725\n","Validation loss:  4.106300161361695\n","Epoch time -----  28.526926517486572  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2462361305952072\n","Validation loss:  4.078919353485108\n","Epoch time -----  28.444090604782104  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2343214452266693\n","Validation loss:  4.072513736724853\n","Epoch time -----  28.364020347595215  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.239371197919051\n","Validation loss:  4.079096948623657\n","Epoch time -----  28.377659797668457  sec\n","Testing\n","Test accuracy:  9.9\n","3270\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.274105191230774\n","Validation loss:  4.152694467544555\n","Epoch time -----  29.31648564338684  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.236639563853924\n","Validation loss:  4.129985471725464\n","Epoch time -----  29.06776213645935  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2384635324661548\n","Validation loss:  4.136974336624146\n","Epoch time -----  30.029748678207397  sec\n","Epoch:  4\n","Train loss:  1.2375781536102295\n","Validation loss:  4.131509284973145\n","Epoch time -----  29.09580159187317  sec\n","Testing\n","Test accuracy:  9.94\n","3530\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2712708413600922\n","Validation loss:  4.1167262802124025\n","Epoch time -----  29.95390558242798  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2422537675925664\n","Validation loss:  4.095404232025147\n","Epoch time -----  29.93083691596985  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.24237436907632\n","Validation loss:  4.095010118484497\n","Epoch time -----  29.98959183692932  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2453621413026537\n","Validation loss:  4.090694946289062\n","Epoch time -----  29.899868488311768  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.83\n","3800\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.261782459417979\n","Validation loss:  4.063605777740478\n","Epoch time -----  30.736282110214233  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2377391556898754\n","Validation loss:  4.028089918136597\n","Epoch time -----  30.646899461746216  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2266871690750123\n","Validation loss:  4.028929822921753\n","Epoch time -----  30.608442306518555  sec\n","Epoch:  4\n","Train loss:  1.2308409849802653\n","Validation loss:  4.0321246490478515\n","Epoch time -----  30.581568717956543  sec\n","Testing\n","Test accuracy:  9.89\n","4070\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2610081024467945\n","Validation loss:  4.3437128925323485\n","Epoch time -----  31.49560785293579  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2255273796617985\n","Validation loss:  4.303760709762574\n","Epoch time -----  31.47018790245056  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2223554700613022\n","Validation loss:  4.2882704906463625\n","Epoch time -----  31.325905561447144  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2230195850133896\n","Validation loss:  4.316935087203979\n","Epoch time -----  31.548232316970825  sec\n","Testing\n","Test accuracy:  9.92\n","4350\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2771716433412887\n","Validation loss:  4.408061374664307\n","Epoch time -----  32.34978437423706  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.243595589609707\n","Validation loss:  4.4028804454803465\n","Epoch time -----  32.134504079818726  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.227315432885114\n","Validation loss:  4.38708678817749\n","Epoch time -----  32.14788866043091  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.244496713666355\n","Validation loss:  4.386953466415405\n","Epoch time -----  32.884305477142334  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.0\n","4630\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2639630291913007\n","Validation loss:  4.4335542526245115\n","Epoch time -----  33.08791208267212  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2269152725065076\n","Validation loss:  4.43197900390625\n","Epoch time -----  33.073827028274536  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2155625691285004\n","Validation loss:  4.4444451370239255\n","Epoch time -----  33.021934270858765  sec\n","Epoch:  4\n","Train loss:  1.235093089374336\n","Validation loss:  4.425675142288208\n","Epoch time -----  32.9928138256073  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.8\n","4910\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2573665288778453\n","Validation loss:  4.568182312011719\n","Epoch time -----  33.85972714424133  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2379754369075482\n","Validation loss:  4.580480857849121\n","Epoch time -----  33.92005681991577  sec\n","Epoch:  3\n","Train loss:  1.249163303619776\n","Validation loss:  4.566544254302978\n","Epoch time -----  33.9322669506073  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2335508037836125\n","Validation loss:  4.581180040359497\n","Epoch time -----  33.845248222351074  sec\n","Testing\n","Test accuracy:  9.76\n","5190\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2418083563083555\n","Validation loss:  4.3072042007446285\n","Epoch time -----  34.77954316139221  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2220972282130544\n","Validation loss:  4.301075283050537\n","Epoch time -----  35.27313160896301  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.208352243028036\n","Validation loss:  4.304225866317749\n","Epoch time -----  34.72972631454468  sec\n","Epoch:  4\n","Train loss:  1.2204156619746511\n","Validation loss:  4.322295860290527\n","Epoch time -----  34.71182370185852  sec\n","Testing\n","Test accuracy:  9.61\n","5470\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2562743591707806\n","Validation loss:  4.632236808776855\n","Epoch time -----  35.51517844200134  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2446583564891371\n","Validation loss:  4.635098476409912\n","Epoch time -----  35.606496810913086  sec\n","Epoch:  3\n","Train loss:  1.233507372612177\n","Validation loss:  4.640099998474121\n","Epoch time -----  35.43507146835327  sec\n","Epoch:  4\n","Train loss:  1.2392306688220003\n","Validation loss:  4.611619987487793\n","Epoch time -----  35.59621453285217  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.01\n","5760\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2767848266495598\n","Validation loss:  4.411068962097168\n","Epoch time -----  36.421279191970825  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.240985213385688\n","Validation loss:  4.443131952285767\n","Epoch time -----  36.30134344100952  sec\n","Epoch:  3\n","Train loss:  1.2346367941962348\n","Validation loss:  4.453976205825805\n","Epoch time -----  36.480061292648315  sec\n","Epoch:  4\n","Train loss:  1.2439282523261177\n","Validation loss:  4.424143611907959\n","Epoch time -----  36.41206884384155  sec\n","Testing\n","Test accuracy:  9.77\n","6050\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2791093016664188\n","Validation loss:  4.797257183074951\n","Epoch time -----  37.43671703338623  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2483306924502056\n","Validation loss:  4.747398229598999\n","Epoch time -----  37.31709957122803  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.241961261878411\n","Validation loss:  4.751376319885254\n","Epoch time -----  37.127302408218384  sec\n","Epoch:  4\n","Train loss:  1.2352265405158203\n","Validation loss:  4.7674460716247555\n","Epoch time -----  37.17364954948425  sec\n","Testing\n","Test accuracy:  9.79\n","6350\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2710987842082977\n","Validation loss:  4.4708613014221195\n","Epoch time -----  38.68677258491516  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2371672177314759\n","Validation loss:  4.451495309829712\n","Epoch time -----  38.114463806152344  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2406461596488954\n","Validation loss:  4.492157016754151\n","Epoch time -----  38.14442682266235  sec\n","Epoch:  4\n","Train loss:  1.236314091682434\n","Validation loss:  4.457829092025757\n","Epoch time -----  38.31492590904236  sec\n","Testing\n","Test accuracy:  9.89\n","6650\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2721141507992377\n","Validation loss:  4.638904279708862\n","Epoch time -----  39.12507939338684  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2418832664306347\n","Validation loss:  4.640848932266235\n","Epoch time -----  38.938080072402954  sec\n","Epoch:  3\n","Train loss:  1.250124563391392\n","Validation loss:  4.622363607406617\n","Epoch time -----  38.96929669380188  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2378467069222376\n","Validation loss:  4.637943138122559\n","Epoch time -----  38.895639419555664  sec\n","Testing\n","Test accuracy:  9.87\n","6950\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2472917318344117\n","Validation loss:  4.611789396286011\n","Epoch time -----  39.89079999923706  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2273596904494546\n","Validation loss:  4.643294729232788\n","Epoch time -----  39.74622464179993  sec\n","Epoch:  3\n","Train loss:  1.2258410594680094\n","Validation loss:  4.628152975082397\n","Epoch time -----  39.77540874481201  sec\n","Epoch:  4\n","Train loss:  1.2160484465685757\n","Validation loss:  4.592784036636353\n","Epoch time -----  40.64515924453735  sec\n","validation loss minimum, saving model\n","Testing\n"]},{"output_type":"stream","name":"stderr","text":["\r 60%|██████    | 3/5 [3:17:07<2:11:24, 3942.09s/it]"]},{"output_type":"stream","name":"stdout","text":["Test accuracy:  9.93\n","3\n","Test accuracy:  8.48\n","Training samples:  1500\n","Epoch:  1\n","Train loss:  2.0303425192832947\n","Validation loss:  2.660643144607544\n","Epoch time -----  24.024007558822632  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.7692469259103139\n","Validation loss:  2.665953899383545\n","Epoch time -----  24.064288854599  sec\n","Epoch:  3\n","Train loss:  1.7918052573998768\n","Validation loss:  2.66773384475708\n","Epoch time -----  24.071898221969604  sec\n","Epoch:  4\n","Train loss:  1.7775118847688038\n","Validation loss:  2.6687557373046875\n","Epoch time -----  23.90656065940857  sec\n","Test accuracy:  8.47\n","1750\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.5052392312458582\n","Validation loss:  3.401545276641846\n","Epoch time -----  24.89260482788086  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.4107437644686018\n","Validation loss:  3.4205061111450195\n","Epoch time -----  24.993934869766235  sec\n","Epoch:  3\n","Train loss:  1.4084408794130598\n","Validation loss:  3.4180818424224855\n","Epoch time -----  24.753000736236572  sec\n","Epoch:  4\n","Train loss:  1.3958999173981803\n","Validation loss:  3.4231094779968263\n","Epoch time -----  24.795487642288208  sec\n","Testing\n","Test accuracy:  9.59\n","2000\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3950878977775574\n","Validation loss:  3.737008140563965\n","Epoch time -----  25.588308334350586  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.3193530216813087\n","Validation loss:  3.767668571472168\n","Epoch time -----  25.637585878372192  sec\n","Epoch:  3\n","Train loss:  1.3144732862710953\n","Validation loss:  3.7689275321960447\n","Epoch time -----  25.565191984176636  sec\n","Epoch:  4\n","Train loss:  1.3249721229076385\n","Validation loss:  3.7656337547302248\n","Epoch time -----  25.57971167564392  sec\n","Testing\n","Test accuracy:  9.19\n","2250\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3776350286271837\n","Validation loss:  3.885396141052246\n","Epoch time -----  26.336100816726685  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.3062996764977772\n","Validation loss:  3.8332043838500978\n","Epoch time -----  26.28630757331848  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.3191711240344577\n","Validation loss:  3.826120445251465\n","Epoch time -----  26.110917329788208  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2915387683444552\n","Validation loss:  3.8279219589233398\n","Epoch time -----  26.3977313041687  sec\n","Testing\n","Test accuracy:  9.19\n","2500\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3218601822853089\n","Validation loss:  4.141690113067627\n","Epoch time -----  27.088842630386353  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2718357026576996\n","Validation loss:  4.106772384643555\n","Epoch time -----  27.60595417022705  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.278339946269989\n","Validation loss:  4.108335821151734\n","Epoch time -----  27.133822679519653  sec\n","Epoch:  4\n","Train loss:  1.2754874497652053\n","Validation loss:  4.112009887695312\n","Epoch time -----  27.081855058670044  sec\n","Testing\n","Test accuracy:  9.43\n","2750\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3057743121277203\n","Validation loss:  4.070802865982055\n","Epoch time -----  27.613532304763794  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2769336700439453\n","Validation loss:  4.0433405494689945\n","Epoch time -----  27.621134042739868  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2725621272217145\n","Validation loss:  4.04634352684021\n","Epoch time -----  27.76795196533203  sec\n","Epoch:  4\n","Train loss:  1.2521398717706853\n","Validation loss:  4.041106964111328\n","Epoch time -----  27.69280219078064  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  8.95\n","3010\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3368277500073116\n","Validation loss:  4.403852716445923\n","Epoch time -----  28.508042573928833  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2951953709125519\n","Validation loss:  4.373648733139038\n","Epoch time -----  28.490211248397827  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.301060085495313\n","Validation loss:  4.369313283920288\n","Epoch time -----  28.43631148338318  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2966289495428402\n","Validation loss:  4.367039077758789\n","Epoch time -----  28.26775884628296  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.71\n","3270\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.284098242337887\n","Validation loss:  4.193920213699341\n","Epoch time -----  29.525575160980225  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2531280471728399\n","Validation loss:  4.186265096664429\n","Epoch time -----  29.421836376190186  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2821246821146746\n","Validation loss:  4.185448305130005\n","Epoch time -----  29.753898859024048  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2691110326693609\n","Validation loss:  4.189980604171753\n","Epoch time -----  29.34223175048828  sec\n","Testing\n","Test accuracy:  8.52\n","3530\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2897676868098122\n","Validation loss:  4.461921474456787\n","Epoch time -----  30.168047666549683  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2449505116258348\n","Validation loss:  4.468980726242066\n","Epoch time -----  30.276036500930786  sec\n","Epoch:  3\n","Train loss:  1.266856700181961\n","Validation loss:  4.4601605625152585\n","Epoch time -----  30.862539052963257  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2588383832148142\n","Validation loss:  4.459070909500122\n","Epoch time -----  30.570517539978027  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.58\n","3800\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.255311487118403\n","Validation loss:  4.5168267936706545\n","Epoch time -----  30.68404984474182  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2459819475809732\n","Validation loss:  4.489960615158081\n","Epoch time -----  30.755348920822144  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2522512515385946\n","Validation loss:  4.47378476524353\n","Epoch time -----  30.826619625091553  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.238696320851644\n","Validation loss:  4.47156109046936\n","Epoch time -----  31.065168857574463  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  8.84\n","4070\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2669204138219357\n","Validation loss:  4.658189260482788\n","Epoch time -----  31.972026824951172  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.253559047356248\n","Validation loss:  4.6614550037384035\n","Epoch time -----  32.02345895767212  sec\n","Epoch:  3\n","Train loss:  1.2546638250350952\n","Validation loss:  4.66520786857605\n","Epoch time -----  31.842338800430298  sec\n","Epoch:  4\n","Train loss:  1.2384125366806984\n","Validation loss:  4.66540230178833\n","Epoch time -----  31.720353364944458  sec\n","Testing\n","Test accuracy:  9.33\n","4350\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2590239749235266\n","Validation loss:  4.661202798843384\n","Epoch time -----  33.14325141906738  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2475553891238045\n","Validation loss:  4.655952939987182\n","Epoch time -----  32.64491534233093  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2412287557826323\n","Validation loss:  4.668653968811035\n","Epoch time -----  32.604668378829956  sec\n","Epoch:  4\n","Train loss:  1.2444188875310562\n","Validation loss:  4.647881639480591\n","Epoch time -----  32.926979541778564  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.4\n","4630\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2553026112350258\n","Validation loss:  4.750511308670044\n","Epoch time -----  33.22561311721802  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2404273909491461\n","Validation loss:  4.746415287017823\n","Epoch time -----  33.452614068984985  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.245639494947485\n","Validation loss:  4.755627189636231\n","Epoch time -----  33.752461671829224  sec\n","Epoch:  4\n","Train loss:  1.244322704302298\n","Validation loss:  4.726607107162476\n","Epoch time -----  33.30499196052551  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.48\n","4910\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2626682030848968\n","Validation loss:  4.618581146240234\n","Epoch time -----  34.16400718688965  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.218074055818411\n","Validation loss:  4.6053979740142825\n","Epoch time -----  34.205121755599976  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2218919900747447\n","Validation loss:  4.611308485031128\n","Epoch time -----  34.19287109375  sec\n","Epoch:  4\n","Train loss:  1.2366299797327092\n","Validation loss:  4.61196347618103\n","Epoch time -----  34.74024939537048  sec\n","Testing\n","Test accuracy:  9.11\n","5190\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2615304850950473\n","Validation loss:  4.810678218841553\n","Epoch time -----  34.97530269622803  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2262695606161909\n","Validation loss:  4.810564214706421\n","Epoch time -----  35.009236574172974  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2219331162731821\n","Validation loss:  4.791217491149903\n","Epoch time -----  35.0808048248291  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2195377495230697\n","Validation loss:  4.75608550453186\n","Epoch time -----  35.118035078048706  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  8.86\n","5470\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2633335507193277\n","Validation loss:  5.106039031982422\n","Epoch time -----  35.831594705581665  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.243579670440319\n","Validation loss:  5.069972122192383\n","Epoch time -----  35.84035658836365  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2451722760533177\n","Validation loss:  5.0911459083557125\n","Epoch time -----  35.71587872505188  sec\n","Epoch:  4\n","Train loss:  1.2412098313486852\n","Validation loss:  5.088733180999756\n","Epoch time -----  35.69531846046448  sec\n","Testing\n","Test accuracy:  9.49\n","5760\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2788403934902615\n","Validation loss:  5.362519863128662\n","Epoch time -----  37.00920391082764  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.246150024731954\n","Validation loss:  5.354954196929931\n","Epoch time -----  36.74481248855591  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2540785643789503\n","Validation loss:  5.351247695922852\n","Epoch time -----  36.56231451034546  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2532694273524814\n","Validation loss:  5.35817537689209\n","Epoch time -----  36.48202681541443  sec\n","Testing\n","Test accuracy:  9.22\n","6050\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2721790422995884\n","Validation loss:  5.142530128479004\n","Epoch time -----  37.5614538192749  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2521613861123722\n","Validation loss:  5.131062469482422\n","Epoch time -----  37.8478319644928  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2486782545844715\n","Validation loss:  5.1403268013000485\n","Epoch time -----  37.56465268135071  sec\n","Epoch:  4\n","Train loss:  1.248000790675481\n","Validation loss:  5.1301351737976075\n","Epoch time -----  37.667701721191406  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.39\n","6350\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2663436889648438\n","Validation loss:  5.056434381484985\n","Epoch time -----  38.55484962463379  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2588815116882324\n","Validation loss:  5.0701343574523925\n","Epoch time -----  38.27694392204285  sec\n","Epoch:  3\n","Train loss:  1.2548996424674987\n","Validation loss:  5.088747005462647\n","Epoch time -----  38.48456144332886  sec\n","Epoch:  4\n","Train loss:  1.2511518788337708\n","Validation loss:  5.080508134841919\n","Epoch time -----  38.704249143600464  sec\n","Testing\n","Test accuracy:  8.66\n","6650\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2744836257054255\n","Validation loss:  5.239657295227051\n","Epoch time -----  39.709556102752686  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2483007713006093\n","Validation loss:  5.2329124794006345\n","Epoch time -----  39.61138463020325  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.236965604699575\n","Validation loss:  5.254749179840088\n","Epoch time -----  39.551002740859985  sec\n","Epoch:  4\n","Train loss:  1.2498232068923802\n","Validation loss:  5.24884599685669\n","Epoch time -----  39.5230872631073  sec\n","Testing\n","Test accuracy:  8.38\n","6950\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.275151859630238\n","Validation loss:  5.335828403472901\n","Epoch time -----  40.42641282081604  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2499300089749423\n","Validation loss:  5.329888263702393\n","Epoch time -----  40.2981231212616  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2431667956438932\n","Validation loss:  5.337319919586181\n","Epoch time -----  40.27116918563843  sec\n","Epoch:  4\n","Train loss:  1.2524656772613525\n","Validation loss:  5.35220055770874\n","Epoch time -----  40.148366928100586  sec\n","Testing\n"]},{"output_type":"stream","name":"stderr","text":["\r 80%|████████  | 4/5 [4:23:11<1:05:50, 3950.82s/it]"]},{"output_type":"stream","name":"stdout","text":["Test accuracy:  9.54\n","4\n","Test accuracy:  8.56\n","Training samples:  1500\n","Epoch:  1\n","Train loss:  1.7814755042394002\n","Validation loss:  2.884415048599243\n","Epoch time -----  24.349387884140015  sec\n","Epoch:  2\n","Train loss:  1.5526232322057087\n","Validation loss:  2.8877793521881103\n","Epoch time -----  24.611472129821777  sec\n","Epoch:  3\n","Train loss:  1.5486313303311665\n","Validation loss:  2.8881827239990234\n","Epoch time -----  24.519367456436157  sec\n","Epoch:  4\n","Train loss:  1.5403011242548625\n","Validation loss:  2.890467851638794\n","Epoch time -----  24.507551431655884  sec\n","Test accuracy:  10.04\n","1750\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.421768537589482\n","Validation loss:  3.4992088565826416\n","Epoch time -----  25.35208225250244  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.350589164665767\n","Validation loss:  3.508511442184448\n","Epoch time -----  25.974544286727905  sec\n","Epoch:  3\n","Train loss:  1.3458512084824699\n","Validation loss:  3.508857929229736\n","Epoch time -----  25.0532169342041  sec\n","Epoch:  4\n","Train loss:  1.3608240229742867\n","Validation loss:  3.5137953071594237\n","Epoch time -----  25.0640389919281  sec\n","Testing\n","Test accuracy:  9.96\n","2000\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.365564376115799\n","Validation loss:  3.747820306777954\n","Epoch time -----  26.402549505233765  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2972796186804771\n","Validation loss:  3.7375010738372803\n","Epoch time -----  26.511967658996582  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.3064071089029312\n","Validation loss:  3.7439111156463625\n","Epoch time -----  26.32733154296875  sec\n","Epoch:  4\n","Train loss:  1.316464751958847\n","Validation loss:  3.7366716251373293\n","Epoch time -----  26.197479009628296  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.2\n","2250\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3863618440098233\n","Validation loss:  3.860338788986206\n","Epoch time -----  27.070749759674072  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.3171566327412922\n","Validation loss:  3.8395427684783936\n","Epoch time -----  26.842058420181274  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2937856780158148\n","Validation loss:  3.824755449295044\n","Epoch time -----  26.90280532836914  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2968857487042744\n","Validation loss:  3.815536994934082\n","Epoch time -----  26.987184762954712  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.75\n","2500\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3318393290042878\n","Validation loss:  4.160538040161133\n","Epoch time -----  28.456461906433105  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2910435318946838\n","Validation loss:  4.139978090286255\n","Epoch time -----  27.605372667312622  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2762320816516877\n","Validation loss:  4.127010387420654\n","Epoch time -----  27.953518867492676  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2730879366397858\n","Validation loss:  4.1332705821990965\n","Epoch time -----  27.943406581878662  sec\n","Testing\n","Test accuracy:  10.08\n","2750\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3150901956991716\n","Validation loss:  4.347375324249268\n","Epoch time -----  28.387407541275024  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.268459913405505\n","Validation loss:  4.3198050365448\n","Epoch time -----  28.54366683959961  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.283120334148407\n","Validation loss:  4.3195993537902835\n","Epoch time -----  29.1715030670166  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.27498859167099\n","Validation loss:  4.304936836242676\n","Epoch time -----  28.543240070343018  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.11\n","3010\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.298990656932195\n","Validation loss:  4.32569944190979\n","Epoch time -----  29.164450645446777  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2840479463338852\n","Validation loss:  4.325520708084106\n","Epoch time -----  29.2049617767334  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.275204136967659\n","Validation loss:  4.3162927742004396\n","Epoch time -----  29.323145151138306  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2711604858438175\n","Validation loss:  4.310168712615967\n","Epoch time -----  29.197033882141113  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.13\n","3270\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2968925421054547\n","Validation loss:  4.65366086769104\n","Epoch time -----  29.880053281784058  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2646348843207726\n","Validation loss:  4.643286764144897\n","Epoch time -----  29.797081232070923  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2569402249959798\n","Validation loss:  4.6531405429840085\n","Epoch time -----  30.04688310623169  sec\n","Epoch:  4\n","Train loss:  1.260746841247265\n","Validation loss:  4.643277767181396\n","Epoch time -----  29.699512243270874  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.15\n","3530\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.306314332144601\n","Validation loss:  4.671089561462402\n","Epoch time -----  30.538057327270508  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2557641906397683\n","Validation loss:  4.648776830673218\n","Epoch time -----  30.336865425109863  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.263738981315068\n","Validation loss:  4.644239818572998\n","Epoch time -----  30.651477098464966  sec\n","validation loss minimum, saving model\n","Epoch:  4\n","Train loss:  1.2693317064217158\n","Validation loss:  4.641472368240357\n","Epoch time -----  30.529380798339844  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  10.15\n","3800\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.2728033383687338\n","Validation loss:  4.871783876419068\n","Epoch time -----  31.50013303756714  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2285236279169718\n","Validation loss:  4.852999998092652\n","Epoch time -----  32.07500672340393  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2469002942244212\n","Validation loss:  4.854724700927735\n","Epoch time -----  31.512048482894897  sec\n","Epoch:  4\n","Train loss:  1.2491250971953074\n","Validation loss:  4.866758274078369\n","Epoch time -----  31.444230318069458  sec\n","Testing\n","Test accuracy:  10.1\n","4070\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.291682943701744\n","Validation loss:  5.080412940979004\n","Epoch time -----  32.53302240371704  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2743041142821312\n","Validation loss:  5.068161018371582\n","Epoch time -----  32.44485092163086  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.2763584218919277\n","Validation loss:  5.0724794464111325\n","Epoch time -----  33.26831364631653  sec\n","Epoch:  4\n","Train loss:  1.2581031545996666\n","Validation loss:  5.0641304321289065\n","Epoch time -----  32.07885670661926  sec\n","validation loss minimum, saving model\n","Testing\n","Test accuracy:  9.82\n","4350\n","Using CUDA\n","Epoch:  1\n","Train loss:  1.3033567281330334\n","Validation loss:  5.055727085113525\n","Epoch time -----  32.8380184173584  sec\n","validation loss minimum, saving model\n","Epoch:  2\n","Train loss:  1.2660129561143763\n","Validation loss:  5.037647232055664\n","Epoch time -----  33.07136273384094  sec\n","validation loss minimum, saving model\n","Epoch:  3\n","Train loss:  1.263799267656663\n","Validation loss:  5.042274757385254\n","Epoch time -----  33.241032123565674  sec\n","Epoch:  4\n","Train loss:  1.2533912395729738\n","Validation loss:  5.043766742706299\n","Epoch time -----  33.19258737564087  sec\n","Testing\n","Test accuracy:  10.38\n","4630\n","Using CUDA\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hkAFhUaM8Rzn"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"nbformat":4,"nbformat_minor":0}